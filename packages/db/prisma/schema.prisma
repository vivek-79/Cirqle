// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  bio         String?
  avatar      String?
  password    String
  gender      String   @default("Male")
  suggestions Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastseen    DateTime?

  messagesStatuses       MessageStatus[]
  sentNotification      Notification[]   @relation("SentNotifications")
  receivedNotifications Notification[]   @relation("ReceivedNotifications")
  sentRequests          FriendRequests[] @relation("sender")
  receivedRequests      FriendRequests[] @relation("receiver")
  following             Follows[]        @relation("followingRelation")
  followers             Follows[]        @relation("followerRelation")
  chats                 Chat[]           @relation("chatMembers")
  post                  Post[]
  comments              Comment[]
  likes                 Like[]
  messages              Message[]
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  message   String

  senderId   Int
  receiverId Int
  sender     User @relation("SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User @relation("ReceivedNotifications", fields: [receiverId], references: [id], onDelete: Cascade)
}

model FriendRequests {
  id Int @id @default(autoincrement())

  senderId   Int
  receiverId Int
  status     FriendRequestStatus @default(Pending)
  createdAt  DateTime            @default(now())

  sender   User @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Follows {
  id String @id @default(uuid())

  followerId  Int
  followingId Int

  follower  User @relation("followingRelation", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("followerRelation", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Post {
  id        Int      @id @default(autoincrement())
  slug      String?  @unique
  title     String
  content   String
  thumbnail String?
  published Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId Int
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId   Int
  post     Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Chat {
  id            String   @id @default(uuid())
  isGroup       Boolean  @default(false)
  name          String?
  groupAvatar   String?
  createdAt     DateTime @default(now())

  lastMessageId   String? @unique
  lastMessage Message? @relation("LastMesssageRelation",fields: [lastMessageId],references: [id],onDelete: Cascade)

  members  User[]    @relation("chatMembers")
  messages Message[]
}

model Message {
  id        String   @id @default(uuid())
  text      String?
  photo     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status   Status   @default(SENT)
  statuses MessageStatus[]
  chatId   String
  chat     Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderId Int
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  lastMessageInChat Chat? @relation("LastMesssageRelation")
}

model MessageStatus {
  id         Int      @id @default(autoincrement())
  status     Status   @default(SENT)
  seenAt     DateTime?
  deliveredAt DateTime @default(now())


  userId     Int
  messageId  String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId]) // ensures one status per user-message pair
}

enum Status {
  SENT
  DELIVERED
  READ
}

enum FriendRequestStatus {
  Pending
  Rejected
  Accepted
}

enum NotificationType {
  FRIEND_REQUEST
  MESSAGE
  COMMENT
  LIKE
  FOLLOW
}

